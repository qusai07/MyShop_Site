@page "/signup"
@using MyShop_Site.Models
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<MyShop_Site.Pages.Signup> Localizer

<PageTitle>@Localizer["Sign Up - MyShop"]</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">@Localizer["Create Your Account"]</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="signupModel" OnValidSubmit="HandleSignup">
                        <DataAnnotationsValidator />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Company Name"] *</label>
                                <InputText @bind-Value="signupModel.CompanyName" class="form-control" />
                                <ValidationMessage For="() => signupModel.CompanyName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Contact Name"] *</label>
                                <InputText @bind-Value="signupModel.ContactName" class="form-control" />
                                <ValidationMessage For="() => signupModel.ContactName" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Contact Email"] *</label>
                                <InputText @bind-Value="signupModel.ContactEmail" class="form-control" type="email" />
                                <ValidationMessage For="() => signupModel.ContactEmail" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Phone Number"] *</label>
                                <InputText @bind-Value="signupModel.ContactPhoneNumber" class="form-control" type="tel" />
                                <ValidationMessage For="() => signupModel.ContactPhoneNumber" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Country"] *</label>
                                <InputSelect @bind-Value="signupModel.Country" class="form-select">
                                    <option value="">@Localizer["Select Country"]</option>
                                    @foreach (var country in countries)
                                    {
                                        <option value="@country">@Localizer[country]</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => signupModel.Country" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Company Size"] *</label>
                                <InputSelect @bind-Value="signupModel.CompanySize" class="form-select">
                                    <option value="">@Localizer["Select Company Size"]</option>
                                    <option value="< 5 employees">@Localizer["< 5 employees"]</option>
                                    <option value="5 - 20 employees">@Localizer["5 - 20 employees"]</option>
                                    <option value="20 - 50 employees">@Localizer["20 - 50 employees"]</option>
                                    <option value="50 - 250 employees">@Localizer["50 - 250 employees"]</option>
                                    <option value="250+ employees">@Localizer["250+ employees"]</option>
                                </InputSelect>
                                <ValidationMessage For="() => signupModel.CompanySize" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@Localizer["Industry"]</label>
                            <InputSelect @bind-Value="signupModel.Industry" class="form-select">
                                <option value="">@Localizer["Select Industry (Optional)"]</option>
                                @foreach (var industry in industries)
                                {
                                    <option value="@industry">@Localizer[industry]</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@Localizer["Username"] *</label>
                            <InputText @bind-Value="signupModel.Username" class="form-control" />
                            <ValidationMessage For="() => signupModel.Username" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Password"] *</label>
                                <div class="input-group">
                                    <InputText @bind-Value="signupModel.Password" class="form-control" type="@(showPassword ? "text" : "password")" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                        <i class="oi @(showPassword ? "oi-eye-closed" : "oi-eye")"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="() => signupModel.Password" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">@Localizer["Confirm Password"] *</label>
                                <div class="input-group">
                                    <InputText @bind-Value="signupModel.ConfirmPassword" class="form-control" type="@(showConfirmPassword ? "text" : "password")" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="ToggleConfirmPasswordVisibility">
                                        <i class="oi @(showConfirmPassword ? "oi-eye-closed" : "oi-eye")"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="() => signupModel.ConfirmPassword" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="signupModel.AcceptTerms" class="form-check-input" id="termsCheck" />
                                <label class="form-check-label" for="termsCheck">
                                    @Localizer["I have read and agree to the"] <a href="/terms" target="_blank">@Localizer["Terms and Conditions"]</a> @Localizer["and"] <a href="/privacy" target="_blank">@Localizer["Privacy Policy"]</a>. *
                                </label>
                            </div>
                            <ValidationMessage For="() => signupModel.AcceptTerms" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @Localizer["Sign Up"]
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private SignupModel signupModel = new SignupModel();
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private bool isSubmitting = false;
    private string errorMessage = "";

    // Placeholder for actual localization strings
    // In a real app, these would be in resource files (e.g., Signup.ar.resx)
    private List<string> countries = new List<string>
    {
        "United States", "Canada", "United Kingdom", "Germany", "France", "Australia", "Japan", "India", "China", "Brazil"
    };

    private List<string> industries = new List<string>
    {
        "Manufacturing", "Retail", "Healthcare", "Financial Services", "Information Technology",
        "Education", "Hospitality", "Construction", "Professional Services", "Logistics and Transportation",
        "Government", "Non-profit", "Energy and Utilities", "Agriculture", "Media and Entertainment",
        "Real Estate", "Automotive", "Telecommunications", "Consumer Goods", "E-commerce"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set default country based on IP (simplified)
            signupModel.Country = "United States";
            signupModel.CompanySize = "20 - 50 employees";
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private async Task HandleSignup()
    {
        isSubmitting = true;
        errorMessage = "";

        try
        {
            // Validate passwords match
            if (signupModel.Password != signupModel.ConfirmPassword)
            {
                errorMessage = Localizer["Passwords do not match."];
                return;
            }

            // Here you would typically save to database
            // For now, just navigate to plan selection
            await Task.Delay(1000); // Simulate API call

            Navigation.NavigateTo("/plans");
        }
        catch (Exception ex)
        {
            errorMessage = Localizer["An error occurred during sign up. Please try again."];
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class SignupModel
    {
        [Required(ErrorMessage = "Company name is required")]
        public string CompanyName { get; set; } = "";

        [Required(ErrorMessage = "Contact name is required")]
        public string ContactName { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string ContactEmail { get; set; } = "";

        [Required(ErrorMessage = "Phone number is required")]
        public string ContactPhoneNumber { get; set; } = "";

        [Required(ErrorMessage = "Country is required")]
        public string Country { get; set; } = "";

        [Required(ErrorMessage = "Company size is required")]
        public string CompanySize { get; set; } = "";

        public string? Industry { get; set; }

        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        public string ConfirmPassword { get; set; } = "";

        [Range(typeof(bool), "true", "true", ErrorMessage = "You must accept the terms and conditions")]
        public bool AcceptTerms { get; set; }
    }
}