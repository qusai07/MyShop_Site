
@page "/payment"
@using MyShop_Site.Models
@using MyShop_Site.Services
@using System.ComponentModel.DataAnnotations
@inject PlanService PlanService
@inject NavigationManager Navigation

<PageTitle>Payment - MyShop</PageTitle>

<div class="container mt-4">
    <div class="row">
        <!-- Left Side - Payment Form -->
        <div class="col-md-8">
            <h2>Complete Your Purchase</h2>
            
            <EditForm Model="paymentModel" OnValidSubmit="ProcessPayment">
                <DataAnnotationsValidator />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <!-- Billing Details -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>Billing Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Company Name *</label>
                                <InputText @bind-Value="paymentModel.CompanyName" class="form-control" />
                                <ValidationMessage For="() => paymentModel.CompanyName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone Number *</label>
                                <InputText @bind-Value="paymentModel.PhoneNumber" class="form-control" />
                                <ValidationMessage For="() => paymentModel.PhoneNumber" />
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Country *</label>
                            <InputSelect @bind-Value="paymentModel.Country" class="form-select">
                                <option value="">Select Country</option>
                                @foreach (var country in countries)
                                {
                                    <option value="@country">@country</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => paymentModel.Country" />
                        </div>
                        
                        <div class="row">
                            <div class="col-md-8 mb-3">
                                <label class="form-label">Street Address *</label>
                                <InputText @bind-Value="paymentModel.Street" class="form-control" />
                                <ValidationMessage For="() => paymentModel.Street" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">City *</label>
                                <InputText @bind-Value="paymentModel.City" class="form-control" />
                                <ValidationMessage For="() => paymentModel.City" />
                            </div>
                        </div>
                        
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Postal Code *</label>
                            <InputText @bind-Value="paymentModel.PostalCode" class="form-control" />
                            <ValidationMessage For="() => paymentModel.PostalCode" />
                        </div>
                    </div>
                </div>

                <!-- Payment Details -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5>Payment Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Card Holder Name *</label>
                            <InputText @bind-Value="paymentModel.CardHolderName" class="form-control" />
                            <ValidationMessage For="() => paymentModel.CardHolderName" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Credit/Debit Card Number *</label>
                            <InputText @bind-Value="paymentModel.CardNumber" class="form-control" placeholder="1234 5678 9012 3456" />
                            <ValidationMessage For="() => paymentModel.CardNumber" />
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Expiry Date *</label>
                                <div class="row">
                                    <div class="col-6">
                                        <InputSelect @bind-Value="paymentModel.ExpiryMonth" class="form-select">
                                            <option value="">MM</option>
                                            @for (int i = 1; i <= 12; i++)
                                            {
                                                <option value="@i.ToString("D2")">@i.ToString("D2")</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="col-6">
                                        <InputSelect @bind-Value="paymentModel.ExpiryYear" class="form-select">
                                            <option value="">YY</option>
                                            @for (int i = DateTime.Now.Year; i <= DateTime.Now.Year + 10; i++)
                                            {
                                                <option value="@i.ToString().Substring(2)">@i.ToString().Substring(2)</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <ValidationMessage For="() => paymentModel.ExpiryMonth" />
                                <ValidationMessage For="() => paymentModel.ExpiryYear" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">CVV *</label>
                                <InputText @bind-Value="paymentModel.CVV" class="form-control" maxlength="4" />
                                <ValidationMessage For="() => paymentModel.CVV" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-success btn-lg" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Make Payment ($@totalAmount.ToString("F2"))
                    </button>
                </div>
            </EditForm>
        </div>

        <!-- Right Side - Payment Summary -->
        <div class="col-md-4">
            <div class="card sticky-top">
                <div class="card-header">
                    <h5>Payment Summary</h5>
                </div>
                <div class="card-body">
                    @if (selectedPlan != null)
                    {
                        <div class="mb-3">
                            <h6>@selectedPlan.Name Plan</h6>
                            <div class="d-flex justify-content-between">
                                <span>@(isYearly ? "Yearly" : "Monthly") subscription</span>
                                <span>$@planPrice.ToString("F2")</span>
                            </div>
                        </div>

                        @if (numberOfUsers > 1)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between">
                                    <span>Additional Users (@(numberOfUsers - 1))</span>
                                    <span>$@usersPrice.ToString("F2")</span>
                                </div>
                            </div>
                        }

                        @if (selectedAddons.Any())
                        {
                            <div class="mb-3">
                                <h6>Add-ons</h6>
                                @foreach (var addon in selectedAddons)
                                {
                                    <div class="d-flex justify-content-between small">
                                        <span>@addon.Name</span>
                                        <span>$@((isYearly ? addon.YearlyPrice : addon.MonthlyPrice).ToString("F2"))</span>
                                    </div>
                                }
                            </div>
                        }

                        <hr>
                        
                        <div class="d-flex justify-content-between h5">
                            <strong>Total Amount</strong>
                            <strong>$@totalAmount.ToString("F2")</strong>
                        </div>
                        
                        <div class="small text-muted mb-3">
                            Billed @(isYearly ? "annually" : "monthly")
                        </div>

                        <div class="small">
                            <strong>Server Configuration:</strong><br>
                            @serverType @(!string.IsNullOrEmpty(serverConfig) ? $"({serverConfig})" : "")
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] [SupplyParameterFromQuery] public int PlanId { get; set; }
    [Parameter] [SupplyParameterFromQuery] public bool Yearly { get; set; }
    [Parameter] [SupplyParameterFromQuery] public int Users { get; set; } = 1;
    [Parameter] [SupplyParameterFromQuery] public string ServerType { get; set; } = "Cloud";
    [Parameter] [SupplyParameterFromQuery] public string ServerConfig { get; set; } = "SharedVM";
    [Parameter] [SupplyParameterFromQuery] public string? Addons { get; set; }

    private PaymentModel paymentModel = new PaymentModel();
    private Plan selectedPlan;
    private List<AddOn> selectedAddons = new List<AddOn>();
    private bool isYearly;
    private int numberOfUsers;
    private string serverType;
    private string serverConfig;
    private decimal planPrice;
    private decimal usersPrice;
    private decimal addonsPrice;
    private decimal totalAmount;
    private bool isProcessing = false;
    private string errorMessage = "";

    private List<string> countries = new List<string>
    {
        "United States", "Canada", "United Kingdom", "Germany", "France", "Australia", "Japan", "India", "China", "Brazil"
    };

    protected override void OnInitialized()
    {
        selectedPlan = PlanService.GetPlanById(PlanId);
        isYearly = Yearly;
        numberOfUsers = Users;
        serverType = ServerType;
        serverConfig = ServerConfig;

        if (!string.IsNullOrEmpty(Addons))
        {
            var addonIds = Addons.Split(',').Select(int.Parse);
            var allAddons = PlanService.GetAllAddOns();
            selectedAddons = allAddons.Where(a => addonIds.Contains(a.Id)).ToList();
        }

        CalculateTotal();

        // Pre-populate some fields (in real app, get from session/user data)
        paymentModel.CompanyName = "Sample Company";
        paymentModel.PhoneNumber = "555-0123";
        paymentModel.Country = "United States";
    }

    private void CalculateTotal()
    {
        if (selectedPlan == null) return;

        planPrice = isYearly ? selectedPlan.YearlyPrice : selectedPlan.MonthlyPrice;
        usersPrice = Math.Max(0, numberOfUsers - 1) * (isYearly ? 60m : 5m);
        addonsPrice = selectedAddons.Sum(a => isYearly ? a.YearlyPrice : a.MonthlyPrice);
        totalAmount = planPrice + usersPrice + addonsPrice;
    }

    private async Task ProcessPayment()
    {
        isProcessing = true;
        errorMessage = "";

        try
        {
            // Simulate payment processing
            await Task.Delay(2000);

            // Generate order number
            var orderNumber = $"ORD-{DateTime.Now:yyyyMMdd}-{Random.Shared.Next(10000, 99999)}";

            // Navigate to success page
            Navigation.NavigateTo($"/success?orderNumber={orderNumber}&amount={totalAmount}&plan={selectedPlan.Name}&yearly={isYearly}");
        }
        catch (Exception ex)
        {
            errorMessage = "Payment processing failed. Please try again.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    public class PaymentModel
    {
        [Required] public string CompanyName { get; set; } = "";
        [Required] public string PhoneNumber { get; set; } = "";
        [Required] public string Country { get; set; } = "";
        [Required] public string Street { get; set; } = "";
        [Required] public string City { get; set; } = "";
        [Required] public string PostalCode { get; set; } = "";
        [Required] public string CardHolderName { get; set; } = "";
        [Required] public string CardNumber { get; set; } = "";
        [Required] public string ExpiryMonth { get; set; } = "";
        [Required] public string ExpiryYear { get; set; } = "";
        [Required] public string CVV { get; set; } = "";
    }
}
